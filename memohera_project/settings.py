"""
Django settings for memohera_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables safely
try:
    from dotenv import load_dotenv
    load_dotenv(dotenv_path=os.path.join(BASE_DIR, '.env'))
except ImportError:
    pass  # dotenv not available, skip loading .env file


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-dn-)tyh$!ubjl&ph0y0#k4q^yshi&3^!i1-w)#hsmm2#&-^3z&')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'memorials',
    'cloudinary',
    'cloudinary_storage',    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'memohera_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'memorials.context_processors.language_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'memohera_project.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Cloudinary credentials
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'),
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True
ENABLE_FAMILY_RELATIONSHIPS = True
AUTO_APPROVE_MEMORIALS = True

LANGUAGES = [
    ('en', _('English')),
    ('zh-cn', _('‰∏≠Êñá (ÁÆÄ‰Ωì)')),
    ('es', _('Espa√±ol')),
    ('ar', _('ÿßŸÑÿπÿ±ÿ®Ÿäÿ©')),
    ('fr', _('Fran√ßais')),
    ('de', _('Deutsch')),
    ('pt', _('Portugu√™s (Brasil)')),
    ('ru', _('–†—É—Å—Å–∫–∏–π')),
    ('ja', _('Êó•Êú¨Ë™û')),
    ('hi', _('‡§π‡§ø‡§®‡•ç‡§¶‡•Ä')),
    ('el', _('ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨')),
]

LANGUAGE_FLAGS = {
    'en': 'üá∫üá∏',
    'zh-cn': 'üá®üá≥',
    'es': 'üá™üá∏',
    'ar': 'üá∏üá¶',
    'fr': 'üá´üá∑',
    'de': 'üá©üá™',
    'pt': 'üáßüá∑',
    'ru': 'üá∑üá∫',
    'ja': 'üáØüáµ',
    'hi': 'üáÆüá≥',
    'el': 'üá¨üá∑',
}

# Path where translation files will be stored
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Auth settings
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'create_memorial'
LOGOUT_REDIRECT_URL = 'about'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Environment-specific settings
if os.environ.get('RAILWAY_ENVIRONMENT'):
    print("=== RAILWAY ENVIRONMENT DETECTED ===")
    print(f"BASE_DIR: {BASE_DIR}")
    print(f"STATIC_ROOT: {STATIC_ROOT}")
    print(f"STATIC_URL: {STATIC_URL}")
    print(f"STATICFILES_DIRS: {STATICFILES_DIRS}")
    
    # Check if static directory exists and list contents
    static_dir = BASE_DIR / 'static'
    print(f"Static dir path: {static_dir}")
    print(f"Static dir exists: {static_dir.exists()}")
    
    if static_dir.exists():
        files = os.listdir(static_dir)
        print(f"Files in static/: {files}")
    
    # Check staticfiles after collection
    print(f"STATIC_ROOT exists: {os.path.exists(STATIC_ROOT)}")
    if os.path.exists(STATIC_ROOT):
        files = os.listdir(STATIC_ROOT)
        print(f"Files in staticfiles/: {files[:10]}")
    
    # Check if manifest file exists
    manifest_path = os.path.join(STATIC_ROOT, 'staticfiles.json')
    print(f"Manifest exists: {os.path.exists(manifest_path)}")
    if os.path.exists(manifest_path):
        with open(manifest_path, 'r') as f:
            import json
            manifest = json.load(f)
            print(f"Logo in manifest: {'memohera_logo_180.png' in manifest.get('paths', {})}")
    
    # Database
    DATABASE_URL = os.environ.get('DATABASE_URL')
    if DATABASE_URL:
        print(f"Database URL found: {DATABASE_URL[:30]}...")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': '/tmp/db.sqlite3',
            }
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
    
    # Security settings
    SECRET_KEY = os.environ.get('SECRET_KEY', SECRET_KEY)
    DEBUG = False
    ALLOWED_HOSTS = ['.railway.app', 'memoheraj-production.up.railway.app','https://memohera.com', 'https://www.memohera.com',]
    
    # CSRF settings for production
    CSRF_TRUSTED_ORIGINS = [
        'https://memoheraj-production.up.railway.app',
        'https://*.railway.app',
        'https://www.memohera.com',
    ]
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    
    # Use simpler WhiteNoise storage (without manifest)
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
    
    print("=== PRODUCTION MODE ACTIVATED ===")
else:
    # Local development settings
    print("=== LOCAL DEVELOPMENT MODE ===")
    DEBUG = True
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }